{"version":3,"file":"static/js/470.c6f65f4d.chunk.js","mappings":"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","sources":["components/PageTitle/PageTitle.jsx","../node_modules/@chakra-ui/media-query/dist/index.esm.js","redux/contacts/selectors.js","components/ModalEdit/ModalEdit.jsx","components/ModalDelete/ModalDelete.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/FilterContacts/FilterContacts.jsx","components/ContactForm/ContactForm.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { PropTypes } from 'prop-types';\nimport { Helmet } from 'react-helmet-async';\n\nexport const PageTitle = ({ title }) => {\n  if (!title) return;\n\n  return (\n    <Helmet>\n      <title>{title}</title>\n    </Helmet>\n  );\n};\n\nPageTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","// ../../../react-shim.js\nimport React from \"react\";\n\n// src/media-query.tsx\nimport { useTheme } from \"@chakra-ui/system\";\nvar getBreakpoint = (theme, value) => {\n  var _a;\n  return ((_a = theme == null ? void 0 : theme.breakpoints) == null ? void 0 : _a[value]) ?? value;\n};\nfunction useQuery(props) {\n  const { breakpoint = \"\", below, above } = props;\n  const theme = useTheme();\n  const bpBelow = getBreakpoint(theme, below);\n  const bpAbove = getBreakpoint(theme, above);\n  let query = breakpoint;\n  if (bpBelow) {\n    query = `(max-width: ${bpBelow})`;\n  } else if (bpAbove) {\n    query = `(min-width: ${bpAbove})`;\n  }\n  return query;\n}\n\n// src/use-media-query.ts\nimport { useEnvironment } from \"@chakra-ui/react-env\";\nimport { useEffect, useState } from \"react\";\nfunction useMediaQuery(query, options = {}) {\n  const { ssr = true, fallback } = options;\n  const env = useEnvironment();\n  const queries = Array.isArray(query) ? query : [query];\n  let fallbackValues = Array.isArray(fallback) ? fallback : [fallback];\n  fallbackValues = fallbackValues.filter((v) => v != null);\n  const [value, setValue] = useState(() => {\n    return queries.map((query2, index) => ({\n      media: query2,\n      matches: ssr ? !!fallbackValues[index] : env.window.matchMedia(query2).matches\n    }));\n  });\n  useEffect(() => {\n    setValue(queries.map((query2) => ({\n      media: query2,\n      matches: env.window.matchMedia(query2).matches\n    })));\n    const mql = queries.map((query2) => env.window.matchMedia(query2));\n    const handler = (evt) => {\n      setValue((prev) => {\n        return prev.slice().map((item) => {\n          if (item.media === evt.media)\n            return { ...item, matches: evt.matches };\n          return item;\n        });\n      });\n    };\n    mql.forEach((mql2) => {\n      if (typeof mql2.addListener === \"function\") {\n        mql2.addListener(handler);\n      } else {\n        mql2.addEventListener(\"change\", handler);\n      }\n    });\n    return () => {\n      mql.forEach((mql2) => {\n        if (typeof mql2.removeListener === \"function\") {\n          mql2.removeListener(handler);\n        } else {\n          mql2.removeEventListener(\"change\", handler);\n        }\n      });\n    };\n  }, [env.window]);\n  return value.map((item) => item.matches);\n}\n\n// src/media-query.hook.ts\nfunction usePrefersReducedMotion(options) {\n  const [prefersReducedMotion] = useMediaQuery(\"(prefers-reduced-motion: reduce)\", options);\n  return prefersReducedMotion;\n}\nfunction useColorModePreference(options) {\n  const [isLight, isDark] = useMediaQuery([\"(prefers-color-scheme: light)\", \"(prefers-color-scheme: dark)\"], options);\n  if (isLight)\n    return \"light\";\n  if (isDark)\n    return \"dark\";\n  return void 0;\n}\n\n// src/use-breakpoint.ts\nimport { useTheme as useTheme2 } from \"@chakra-ui/system\";\n\n// ../../utilities/shared-utils/src/index.ts\nfunction isObject(value) {\n  const type = typeof value;\n  return value != null && (type === \"object\" || type === \"function\") && !Array.isArray(value);\n}\n\n// src/use-breakpoint.ts\nfunction useBreakpoint(arg) {\n  var _a;\n  const opts = isObject(arg) ? arg : { fallback: arg ?? \"base\" };\n  const theme = useTheme2();\n  const breakpoints = theme.__breakpoints.details.map(({ minMaxQuery, breakpoint }) => ({\n    breakpoint,\n    query: minMaxQuery.replace(\"@media screen and \", \"\")\n  }));\n  const fallback = breakpoints.map((bp) => bp.breakpoint === opts.fallback);\n  const values = useMediaQuery(breakpoints.map((bp) => bp.query), { fallback, ssr: opts.ssr });\n  const index = values.findIndex((value) => value == true);\n  return ((_a = breakpoints[index]) == null ? void 0 : _a.breakpoint) ?? opts.fallback;\n}\n\n// src/use-breakpoint-value.ts\nimport { useTheme as useTheme3 } from \"@chakra-ui/system\";\nimport { arrayToObjectNotation } from \"@chakra-ui/breakpoint-utils\";\n\n// src/media-query.utils.ts\nimport { breakpoints as defaultBreakPoints } from \"@chakra-ui/breakpoint-utils\";\nfunction getClosestValue(values, breakpoint, breakpoints = defaultBreakPoints) {\n  let index = Object.keys(values).indexOf(breakpoint);\n  if (index !== -1) {\n    return values[breakpoint];\n  }\n  let stopIndex = breakpoints.indexOf(breakpoint);\n  while (stopIndex >= 0) {\n    const key = breakpoints[stopIndex];\n    if (values.hasOwnProperty(key)) {\n      index = stopIndex;\n      break;\n    }\n    stopIndex -= 1;\n  }\n  if (index !== -1) {\n    const key = breakpoints[index];\n    return values[key];\n  }\n  return void 0;\n}\n\n// src/use-breakpoint-value.ts\nfunction useBreakpointValue(values, arg) {\n  var _a;\n  const opts = isObject(arg) ? arg : { fallback: arg ?? \"base\" };\n  const breakpoint = useBreakpoint(opts);\n  const theme = useTheme3();\n  if (!breakpoint)\n    return;\n  const breakpoints = Array.from(((_a = theme.__breakpoints) == null ? void 0 : _a.keys) || []);\n  const obj = Array.isArray(values) ? Object.fromEntries(Object.entries(arrayToObjectNotation(values, breakpoints)).map(([key, value]) => [key, value])) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}\n\n// src/visibility.tsx\nfunction Visibility(props) {\n  const { breakpoint, hide, children, ssr } = props;\n  const [show] = useMediaQuery(breakpoint, { ssr });\n  const isVisible = hide ? !show : show;\n  const rendered = isVisible ? children : null;\n  return rendered;\n}\n\n// src/show.tsx\nfunction Show(props) {\n  const { children, ssr } = props;\n  const query = useQuery(props);\n  return /* @__PURE__ */ React.createElement(Visibility, {\n    breakpoint: query,\n    ssr\n  }, children);\n}\nShow.displayName = \"Show\";\n\n// src/hide.tsx\nfunction Hide(props) {\n  const { children, ssr } = props;\n  const query = useQuery(props);\n  return /* @__PURE__ */ React.createElement(Visibility, {\n    breakpoint: query,\n    hide: true,\n    ssr\n  }, children);\n}\nHide.displayName = \"Hide\";\nexport {\n  Hide,\n  Show,\n  useBreakpoint,\n  useBreakpointValue,\n  useColorModePreference,\n  useMediaQuery,\n  usePrefersReducedMotion,\n  useQuery\n};\n","export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilterValue = state => state.filter;\n\nexport const selectFilteredContacts = state => {\n    const contacts = selectContacts(state);\n    const filterValue = selectFilterValue(state);\n    const normalizedFilter = filterValue.toLowerCase();\n    return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(normalizedFilter)\n    );\n};\n","import { createPortal } from 'react-dom';\nimport { useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport PropTypes from 'prop-types';\n\nimport { updateContact } from 'redux/contacts/operations';\nimport {\n  Box,\n  Button,\n  FormLabel,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  Modal,\n  ModalCloseButton,\n  ModalContent,\n  ModalOverlay,\n  Stack,\n  Text,\n} from '@chakra-ui/react';\nimport { AiOutlineUser, AiOutlinePhone } from 'react-icons/ai';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const ModalEdit = ({ contact, modalHandler }) => {\n  const dispatch = useDispatch();\n  const { id, name, number } = contact;\n  const { isOpen, onClose } = modalHandler;\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    defaultValues: {\n      name,\n      number,\n    },\n  });\n\n  const onSubmit = data => {\n    dispatch(updateContact({ id, data }));\n    reset();\n    onClose();\n  };\n\n  return createPortal(\n    <Modal size=\"md\" isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent p={3}>\n        <ModalCloseButton zIndex=\"docked\" />\n        <Stack as=\"form\" gap={3} onSubmit={handleSubmit(onSubmit)}>\n          <Box pos=\"relative\">\n            <FormLabel>\n              Name\n              <InputGroup mt={3}>\n                <Input\n                  {...register('name', {\n                    required: 'Name is required',\n                    pattern: {\n                      value:\n                        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n                      message:\n                        'Name may contains only letters, apostrophe, dash and spaces.',\n                    },\n                  })}\n                  type=\"text\"\n                />\n                <InputLeftElement\n                  pointerEvents=\"none\"\n                  children={<AiOutlineUser color=\"gray.300\" />}\n                />\n              </InputGroup>\n            </FormLabel>\n            <Box position=\"absolute\" top=\"95%\">\n              {errors?.name && (\n                <Text\n                  fontSize=\"xs\"\n                  color=\"#ff001b\"\n                  textShadow=\"rgb(0 0 0 / 25%) 0px 2px 2px\"\n                >\n                  {errors?.name?.message || 'Error'}\n                </Text>\n              )}\n            </Box>\n          </Box>\n          <Box pos=\"relative\">\n            <FormLabel>\n              Number\n              <InputGroup mt={3}>\n                <Input\n                  {...register('number', {\n                    required: 'Number is required',\n                    pattern: {\n                      value: /^\\+?[0-9()\\s-]{4,}$/,\n                      message:\n                        'Number must be digits and at least 4 characters',\n                    },\n                  })}\n                  type=\"tel\"\n                />\n                <InputLeftElement\n                  pointerEvents=\"none\"\n                  transform=\"rotate(-90deg) scale(-1) \"\n                  children={<AiOutlinePhone color=\"gray.300\" />}\n                />\n              </InputGroup>\n            </FormLabel>\n\n            <Box position=\"absolute\" top=\"95%\">\n              {errors?.number && (\n                <Text\n                  fontSize=\"xs\"\n                  color=\"#ff001b\"\n                  textShadow=\"rgb(0 0 0 / 25%) 0px 2px 2px\"\n                >\n                  {errors?.number?.message || 'Error'}\n                </Text>\n              )}\n            </Box>\n          </Box>\n          <Button type=\"submit\">Save</Button>\n        </Stack>\n      </ModalContent>\n    </Modal>,\n    modalRoot\n  );\n};\n\nModalEdit.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n  modalHandler: PropTypes.object.isRequired,\n};\n","import { createPortal } from 'react-dom';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteContact } from 'redux/contacts/operations';\n\nimport {\n  Button,\n  Grid,\n  Modal,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n} from '@chakra-ui/react';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const ModalDelete = ({ contact, modalHandler }) => {\n  const dispatch = useDispatch();\n  const { id, name } = contact;\n  const { isOpen, onClose } = modalHandler;\n\n  return createPortal(\n    <Modal size=\"md\" isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent p={3}>\n        <ModalCloseButton zIndex=\"docked\" />\n        <ModalHeader>\n          Are you sure to delete <b> {name}</b>?\n        </ModalHeader>\n        <Grid templateColumns=\"repeat(2, 1fr)\" gap={3}>\n          <Button onClick={() => dispatch(deleteContact(id))}>Delete</Button>\n          <Button onClick={onClose} variant=\"outline\">\n            Cancel\n          </Button>\n        </Grid>\n      </ModalContent>\n    </Modal>,\n    modalRoot\n  );\n};\n\nModalDelete.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n  modalHandler: PropTypes.object.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { ModalEdit } from 'components/ModalEdit';\nimport { ModalDelete } from 'components/ModalDelete';\nimport { useDisclosure, Box, Button, Flex, Text } from '@chakra-ui/react';\nimport { AiOutlineDelete, AiOutlineEdit } from 'react-icons/ai';\n\nexport const ContactItem = ({ contact }) => {\n  const { name, number } = contact;\n  const editModalHandler = useDisclosure();\n  const deleteModalHandler = useDisclosure();\n\n  return (\n    <>\n      <Flex\n        as=\"li\"\n        justify=\"space-between\"\n        align=\"center\"\n        gap={6}\n        w={{ base: '100%', md: '300px' }}\n        p={3}\n        borderRadius=\"16px\"\n        boxShadow=\"0px 4px 18px -2px #c3d0dd\"\n      >\n        <Box>\n          <Text fontSize=\"18px\" fontWeight=\"600\">\n            {name}\n          </Text>\n          <Text>{number}</Text>\n        </Box>\n        <Flex gap={3}>\n          <Button\n            size=\"sm\"\n            borderRadius=\"70% 30% 56% 44% / 44% 61% 39% 56%\"\n            onClick={deleteModalHandler.onOpen}\n          >\n            <AiOutlineDelete />\n          </Button>\n          <Button\n            size=\"sm\"\n            borderRadius=\"28% 72% 52% 48% / 44% 53% 47% 56%\"\n            onClick={editModalHandler.onOpen}\n          >\n            <AiOutlineEdit />\n          </Button>\n        </Flex>\n      </Flex>\n      {editModalHandler.isOpen && (\n        <ModalEdit contact={contact} modalHandler={editModalHandler} />\n      )}\n      {deleteModalHandler.isOpen && (\n        <ModalDelete contact={contact} modalHandler={deleteModalHandler} />\n      )}\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { useSelector } from 'react-redux';\nimport { Flex } from '@chakra-ui/react';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\nimport { ContactItem } from '../ContactItem';\n\nexport const ContactList = () => {\n  const visibleContacts = useSelector(selectFilteredContacts);\n  const alphabeticalContacts = visibleContacts.sort(\n    (firstContact, secondContact) =>\n      firstContact.name.localeCompare(secondContact.name)\n  );\n\n  return (\n    <Flex as=\"ul\" direction=\"column\" gap={4}>\n      {alphabeticalContacts.map(contact => (\n        <ContactItem key={contact.id} contact={contact}></ContactItem>\n      ))}\n    </Flex>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { selectFilterValue } from 'redux/contacts/selectors';\nimport { setFilterValue } from 'redux/contacts/filterSlice';\nimport { Input, Stack } from '@chakra-ui/react';\n\nexport const FilterContacts = () => {\n  const filterValue = useSelector(selectFilterValue);\n  const dispatch = useDispatch();\n\n  const handleInputChange = e => {\n    dispatch(setFilterValue(e.target.value));\n  };\n\n  return (\n    <Stack w={{ base: '100%', md: '300px' }} mb={5}>\n      <label htmlFor=\"filter\">Find contacts by name</label>\n      <Input\n        size=\"md\"\n        id=\"filter\"\n        type=\"text\"\n        value={filterValue}\n        onChange={handleInputChange}\n      />\n    </Stack>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { addContact } from 'redux/contacts/operations';\n\nimport { Box, Button, FormLabel, Input, Stack, Text } from '@chakra-ui/react';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm();\n\n  const onSubmit = data => {\n    dispatch(addContact(data));\n    reset();\n  };\n\n  return (\n    <Box>\n      <Stack\n        w={{ base: '100%', md: '300px' }}\n        as=\"form\"\n        gap={3}\n        mb={4}\n        onSubmit={handleSubmit(onSubmit)}\n      >\n        <Box pos=\"relative\">\n          <FormLabel htmlFor=\"name\">Name</FormLabel>\n          <Input\n            size=\"md\"\n            id=\"name\"\n            {...register('name', {\n              required: 'Name is required',\n              pattern: {\n                value: /^[a-z A-Z]*$/,\n                message: 'Name must be letters',\n              },\n              minLength: {\n                value: 2,\n                message: 'Name should be at least 2 characters',\n              },\n            })}\n            type=\"text\"\n          />\n\n          <Box position=\"absolute\" bottom={-5}>\n            {errors?.name && (\n              <Text\n                fontSize=\"xs\"\n                color=\"#ff001b\"\n                textShadow=\"rgb(0 0 0 / 25%) 0px 2px 2px\"\n              >\n                {errors?.name?.message || 'Error'}\n              </Text>\n            )}\n          </Box>\n        </Box>\n        <Box pos=\"relative\">\n          <FormLabel htmlFor=\"number\">Number</FormLabel>\n          <Input\n            size=\"md\"\n            id=\"number\"\n            {...register('number', {\n              required: 'Number is required',\n              pattern: {\n                value: /^\\+?[0-9()\\s-]{4,}$/,\n                message: 'Number must be digits and at least 4 characters',\n              },\n            })}\n            type=\"tel\"\n          />\n\n          <Box position=\"absolute\" bottom={-5}>\n            {errors?.number && (\n              <Text\n                fontSize=\"xs\"\n                color=\"#ff001b\"\n                textShadow=\"rgb(0 0 0 / 25%) 0px 2px 2px\"\n              >\n                {errors?.number?.message || 'Error'}\n              </Text>\n            )}\n          </Box>\n        </Box>\n        <Button size=\"md\" type=\"submit\">\n          Add contact\n        </Button>\n      </Stack>\n    </Box>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Box,\n  Flex,\n  Heading,\n  Spinner,\n  useBreakpointValue,\n} from '@chakra-ui/react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\n\nimport { ContactList } from 'components/ContactList';\nimport { FilterContacts } from 'components/FilterContacts';\nimport { ContactForm } from 'components/ContactForm';\nimport { PageTitle } from 'components/PageTitle';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const isBelowMd = useBreakpointValue({ base: true, md: false });\n\n  return (\n    <Box maxW={isBelowMd && '450px'} mx={isBelowMd && 'auto'}>\n      <PageTitle title=\"My Contacts\" />\n      <Heading as=\"h1\" mb={5}>\n        My Contacts\n      </Heading>\n      <ContactForm />\n      <Box>\n        <FilterContacts />\n        <Flex justify=\"center\" w=\"300px\" mb={2}>\n          {isLoading && <Spinner color=\"gray.300\" />}\n        </Flex>\n        <ContactList />\n      </Box>\n    </Box>\n  );\n}\n"],"names":["PageTitle","title","useMediaQuery","query","options","ssr","fallback","env","useEnvironment","queries","Array","isArray","fallbackValues","filter","v","useState","map","query2","index","media","matches","window","matchMedia","value","setValue","useEffect","mql","handler","evt","prev","slice","item","forEach","mql2","addListener","addEventListener","removeListener","removeEventListener","isObject","type","useBreakpointValue","values","arg","_a","breakpoint","opts","breakpoints","useTheme2","__breakpoints","details","minMaxQuery","replace","bp","findIndex","useBreakpoint","theme","useTheme3","from","keys","defaultBreakPoints","Object","indexOf","stopIndex","key","hasOwnProperty","getClosestValue","fromEntries","entries","arrayToObjectNotation","selectIsLoading","state","contacts","isLoading","selectFilterValue","selectFilteredContacts","items","selectContacts","normalizedFilter","toLowerCase","contact","name","includes","modalRoot","document","querySelector","ModalEdit","modalHandler","dispatch","useDispatch","id","number","isOpen","onClose","useForm","defaultValues","register","handleSubmit","reset","errors","formState","createPortal","size","p","zIndex","as","gap","onSubmit","data","updateContact","pos","mt","required","pattern","message","pointerEvents","children","color","position","top","fontSize","textShadow","transform","ModalDelete","templateColumns","onClick","deleteContact","variant","ContactItem","editModalHandler","useDisclosure","deleteModalHandler","justify","align","w","base","md","borderRadius","boxShadow","fontWeight","onOpen","ContactList","alphabeticalContacts","useSelector","sort","firstContact","secondContact","localeCompare","direction","FilterContacts","filterValue","mb","htmlFor","onChange","e","setFilterValue","target","ContactForm","addContact","minLength","bottom","Contacts","fetchContacts","isBelowMd","maxW","mx"],"sourceRoot":""}