{"version":3,"file":"static/js/257.2cf7b8e1.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactItem/ContactsItem.styled.js","components/Modal/Modal.styled.js","components/Modal/Modal.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/FilterContacts/FilterContacts.styled.js","components/FilterContacts/FilterContacts.jsx","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilterValue = state => state.filter;\n\nexport const selectFilteredContacts = state => {\n    const contacts = selectContacts(state);\n    const filterValue = selectFilterValue(state);\n    const normalizedFilter = filterValue.toLowerCase();\n    return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(normalizedFilter)\n    );\n};\n\n// export const selectShowModal = state => state.contact.showModal;","import styled from \"styled-components\";\n\nexport const ContactItemWrap = styled.li`\n    padding: 4px 8px;\n    display: inline-flex;\n`\n\nexport const ContactDeleteButton = styled.button`\n    margin-left: 8px;\n    padding: 4px 8px;\n\n    color: #000000;\n    background-color: #c3d0e3;\n\n    border-radius: 4px;\n    border: none;\n    box-shadow: 0 4px 10px #0000000d;\n    \n    transition: color 250ms linear, background-color 250ms linear;\n    :hover,\n    :focus {\n        color: #EDF3FC;\n        background-color: #6C8FC4;\n    }\n`\n","import styled from \"styled-components\";\n\nexport const ModalBackdrop = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    background-color: rgba(0, 0, 0, 0.5);\n`\nexport const ModalWrap = styled.div`\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    min-height: 200px;\n    max-width: 400px;\n    background-color: #fff;\n    width: 100%;\n    border-radius: 4px;\n    box-shadow: 0 4px 10px #0000000d;\n\n`","import { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { ModalBackdrop, ModalWrap } from './Modal.styled';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport { updateContact } from 'redux/contacts/operations';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const Modal = ({ contact, onClose }) => {\n  const { id, name, number } = contact;\n  const dispatch = useDispatch();\n  // #1\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Escape') onClose();\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [onClose]);\n\n  // #2\n  const handleBackdropClick = e => {\n    if (e.currentTarget === e.target) onClose();\n  };\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    defaultValues: {\n      name,\n      number,\n    },\n  });\n\n  const onSubmit = data => {\n    dispatch(updateContact({ id, data }));\n    reset();\n    onClose();\n  };\n\n  return createPortal(\n    <ModalBackdrop onClick={handleBackdropClick}>\n      <ModalWrap>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <label>\n            Name\n            <input\n              {...register('name', {\n                required: 'Name is required field',\n                pattern: {\n                  value:\n                    /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n                  message:\n                    'Name may contains only letters, apostrophe, dash and spaces.',\n                },\n              })}\n              type=\"text\"\n            />\n          </label>\n\n          <div>{errors?.name && <p>{errors?.name?.message || 'Error'}</p>}</div>\n          {/*  */}\n          <label>\n            Number\n            <input\n              {...register('number', {\n                required: 'Number is required field',\n                pattern:\n                  /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n                message:\n                  'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n              })}\n              type=\"tel\"\n            />\n          </label>\n\n          <div>\n            {errors?.number && <p>{errors?.number?.message || 'Error'}</p>}\n          </div>\n          <button type=\"submit\">Update contact</button>\n        </form>\n      </ModalWrap>\n    </ModalBackdrop>,\n    modalRoot\n  );\n};\n\nModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { ContactDeleteButton, ContactItemWrap } from './ContactsItem.styled';\nimport { Modal } from 'components/Modal/Modal';\n\nexport const ContactItem = ({ contact }) => {\n  const [showModal, setShowModal] = useState(false);\n  const { id, name, number } = contact;\n  const dispatch = useDispatch();\n\n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n\n  return (\n    <>\n      <ContactItemWrap>\n        {name}: {number}\n        <ContactDeleteButton onClick={() => dispatch(deleteContact(id))}>\n          Delete\n        </ContactDeleteButton>\n        <ContactDeleteButton onClick={toggleModal}>Update</ContactDeleteButton>\n      </ContactItemWrap>\n      {showModal && <Modal contact={contact} onClose={toggleModal} />}\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.object.isRequired,\n};\n","import styled from \"styled-components\";\n\nexport const ContactListWrap = styled.ul`\n    display: flex;\n    flex-direction: column;\n    gap: ${p => p.theme.space[3]}px;\n`\n\n","import { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\nimport { ContactItem } from '../ContactItem/ContactItem';\nimport { ContactListWrap } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const visibleContacts = useSelector(selectFilteredContacts);\n\n  return (\n    <ContactListWrap>\n      {visibleContacts.map(contact => (\n        <ContactItem key={contact.id} contact={contact}></ContactItem>\n      ))}\n    </ContactListWrap>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const FilterWrap = styled.div`\n    display: grid;\n    grid-row-gap: 8px;\n    width: 200px;\n    margin-bottom: 16px;\n`","import { FilterWrap } from './FilterContacts.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectFilterValue } from 'redux/contacts/selectors';\nimport { setFilterValue } from 'redux/contacts/filterSlice';\n\nexport const FilterContacts = () => {\n  const filterValue = useSelector(selectFilterValue);\n  const dispatch = useDispatch();\n\n  const handleInputChange = e => {\n    dispatch(setFilterValue(e.target.value));\n  };\n\n  return (\n    <FilterWrap>\n      <label htmlFor=\"filter\">Find contacts by name</label>\n      <input\n        id=\"filter\"\n        type=\"text\"\n        value={filterValue}\n        onChange={handleInputChange}\n      />\n    </FilterWrap>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const FormWrap = styled.form`\n    display: grid;\n    grid-row-gap: 8px;\n    width: 200px;\n    margin-bottom: 16px;\n`\n\nexport const FormButton = styled.button`\n    width: 120px;\n    margin-top: 4px;\n    padding: 4px 8px;\n\n    color: #000000;\n    background-color: #c3d0e3;\n\n    border-radius: 4px;\n    border: none;\n    box-shadow: 0 4px 10px #0000000d;\n    \n    transition: color 250ms linear, background-color 250ms linear;\n    :hover,\n    :focus {\n        color: #EDF3FC;\n        background-color: #6C8FC4;\n    }\n`","import { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { FormWrap, FormButton } from './ContactForm.styled';\nimport { useForm } from 'react-hook-form';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm();\n\n  const onSubmit = data => {\n    dispatch(addContact(data));\n    reset();\n  };\n\n  return (\n    <FormWrap onSubmit={handleSubmit(onSubmit)}>\n      <label htmlFor=\"name\">Name</label>\n      <input\n        {...register('name', {\n          required: 'Name is required field',\n          pattern: {\n            value: /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n            message:\n              'Name may contains only letters, apostrophe, dash and spaces.',\n          },\n        })}\n        type=\"text\"\n        id=\"name\"\n      />\n      <div>{errors?.name && <p>{errors?.name?.message || 'Error'}</p>}</div>\n\n      <label htmlFor=\"number\">Number</label>\n      <input\n        {...register('number', {\n          required: 'Number is required field',\n          pattern: {\n            value:\n              /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n            message:\n              'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n          },\n        })}\n        type=\"tel\"\n        id=\"number\"\n      />\n      <div>{errors?.number && <p>{errors?.number?.message || 'Error'}</p>}</div>\n      <FormButton type=\"submit\">Add contact</FormButton>\n    </FormWrap>\n  );\n};\n\n// #1\n// pattern.value /regular expr/\n\n// #2 'name' & 'number' fields names is expected for backend\n// чи надійно їх передавати як просто data?\n\n// name\n// \"Name may contains only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n","import { ContactList } from 'components/ContactList/ContactList';\nimport { FilterContacts } from 'components/FilterContacts';\nimport { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>My Contacts</title>\n      </Helmet>\n      <ContactForm />\n      <FilterContacts />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n    </>\n  );\n}\n"],"names":["selectIsLoading","state","contacts","isLoading","selectFilterValue","filter","selectFilteredContacts","items","selectContacts","normalizedFilter","toLowerCase","contact","name","includes","ContactItemWrap","styled","ContactDeleteButton","ModalBackdrop","ModalWrap","modalRoot","document","querySelector","Modal","onClose","id","number","dispatch","useDispatch","useEffect","handleKeyDown","e","code","window","addEventListener","removeEventListener","useForm","defaultValues","register","handleSubmit","reset","errors","formState","createPortal","onClick","currentTarget","target","onSubmit","data","updateContact","required","pattern","value","message","type","ContactItem","useState","showModal","setShowModal","toggleModal","deleteContact","ContactListWrap","p","theme","space","ContactList","visibleContacts","useSelector","map","FilterWrap","FilterContacts","filterValue","htmlFor","onChange","setFilterValue","FormWrap","FormButton","ContactForm","addContact","Contacts","fetchContacts","Helmet"],"sourceRoot":""}