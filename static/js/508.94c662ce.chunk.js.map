{"version":3,"file":"static/js/508.94c662ce.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Modal/Modal.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/FilterContacts/FilterContacts.jsx","components/ContactForm/ContactForm.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilterValue = state => state.filter;\n\nexport const selectFilteredContacts = state => {\n    const contacts = selectContacts(state);\n    const filterValue = selectFilterValue(state);\n    const normalizedFilter = filterValue.toLowerCase();\n    return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(normalizedFilter)\n    );\n};\n","import { createPortal } from 'react-dom';\nimport { useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport PropTypes from 'prop-types';\n\nimport { updateContact } from 'redux/contacts/operations';\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  Modal,\n  ModalCloseButton,\n  ModalContent,\n  ModalOverlay,\n  Stack,\n  Text,\n} from '@chakra-ui/react';\n\nimport { AiOutlineUser, AiOutlinePhone } from 'react-icons/ai';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const ModalEdit = ({ props: { contact, isOpen, onClose } }) => {\n  const { id, name, number } = contact;\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    defaultValues: {\n      name,\n      number,\n    },\n  });\n\n  const onSubmit = data => {\n    dispatch(updateContact({ id, data }));\n    reset();\n    onClose();\n  };\n\n  return createPortal(\n    <Modal size=\"md\" isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent p={3}>\n        <ModalCloseButton zIndex=\"docked\" />\n        <Stack as=\"form\" gap={3} onSubmit={handleSubmit(onSubmit)}>\n          <FormControl pos=\"relative\">\n            <FormLabel mb={3}>Name</FormLabel>\n            <InputGroup>\n              <Input\n                {...register('name', {\n                  required: 'Name is required',\n                  pattern: {\n                    value:\n                      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n                    message:\n                      'Name may contains only letters, apostrophe, dash and spaces.',\n                  },\n                })}\n                type=\"text\"\n              />\n              <InputLeftElement\n                pointerEvents=\"none\"\n                children={<AiOutlineUser color=\"gray.300\" />}\n              />\n            </InputGroup>\n            <Box position=\"absolute\" top=\"100%\">\n              {errors?.name && (\n                <Text\n                  fontSize=\"xs\"\n                  color=\"#ff001b\"\n                  textShadow=\"rgb(0 0 0 / 25%) 0px 2px 2px\"\n                >\n                  {errors?.name?.message || 'Error'}\n                </Text>\n              )}\n            </Box>\n          </FormControl>\n          <FormControl pos=\"relative\">\n            <FormLabel mb={3}>Number</FormLabel>\n            <InputGroup>\n              <Input\n                {...register('number', {\n                  required: 'Number is required',\n                  pattern:\n                    /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n                  message:\n                    'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n                })}\n                type=\"tel\"\n              />\n              <InputLeftElement\n                pointerEvents=\"none\"\n                transform=\"rotate(-90deg) scale(-1) \"\n                children={<AiOutlinePhone color=\"gray.300\" />}\n              />\n            </InputGroup>\n\n            <Box position=\"absolute\" top=\"100%\">\n              {errors?.number && (\n                <Text\n                  fontSize=\"xs\"\n                  color=\"#ff001b\"\n                  textShadow=\"rgb(0 0 0 / 25%) 0px 2px 2px\"\n                >\n                  {errors?.number?.message || 'Error'}\n                </Text>\n              )}\n            </Box>\n          </FormControl>\n          <Button type=\"submit\">Save</Button>\n        </Stack>\n      </ModalContent>\n    </Modal>,\n    modalRoot\n  );\n};\n\nModalEdit.propTypes = {\n  props: PropTypes.shape({\n    contact: PropTypes.object.isRequired,\n    isOpen: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n  }),\n};\n","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { ModalEdit } from 'components/Modal/Modal';\nimport { useDisclosure, Box, Button, Flex, Text } from '@chakra-ui/react';\nimport { AiOutlineDelete, AiOutlineEdit } from 'react-icons/ai';\n\nexport const ContactItem = ({ contact }) => {\n  const { id, name, number } = contact;\n  const dispatch = useDispatch();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Flex\n        as=\"li\"\n        justify=\"space-between\"\n        align=\"center\"\n        gap={6}\n        w=\"300px\"\n        p={3}\n        borderRadius=\"16px\"\n        boxShadow=\"0px 4px 18px -2px #c3d0dd\"\n      >\n        <Box>\n          <Text fontSize=\"18px\" fontWeight=\"600\">\n            {name}\n          </Text>\n          <Text>{number}</Text>\n        </Box>\n        <Flex gap={3}>\n          <Button\n            size=\"sm\"\n            borderRadius=\"70% 30% 56% 44% / 44% 61% 39% 56%\"\n            onClick={() => dispatch(deleteContact(id))}\n          >\n            <AiOutlineDelete />\n          </Button>\n          <Button\n            size=\"sm\"\n            borderRadius=\"28% 72% 52% 48% / 44% 53% 47% 56%\"\n            onClick={onOpen}\n          >\n            <AiOutlineEdit />\n          </Button>\n        </Flex>\n      </Flex>\n      <ModalEdit props={{ contact, isOpen, onClose }} />\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.object.isRequired,\n};\n","import { useSelector } from 'react-redux';\nimport { Flex } from '@chakra-ui/react';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\nimport { ContactItem } from '../ContactItem';\n\nexport const ContactList = () => {\n  const visibleContacts = useSelector(selectFilteredContacts);\n\n  return (\n    <Flex as=\"ul\" direction=\"column\" gap={4}>\n      {visibleContacts.map(contact => (\n        <ContactItem key={contact.id} contact={contact}></ContactItem>\n      ))}\n    </Flex>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { selectFilterValue } from 'redux/contacts/selectors';\nimport { setFilterValue } from 'redux/contacts/filterSlice';\nimport { Input, Stack } from '@chakra-ui/react';\n\nexport const FilterContacts = () => {\n  const filterValue = useSelector(selectFilterValue);\n  const dispatch = useDispatch();\n\n  const handleInputChange = e => {\n    dispatch(setFilterValue(e.target.value));\n  };\n\n  return (\n    <Stack w=\"300px\" mb={5}>\n      <label htmlFor=\"filter\">Find contacts by name</label>\n      <Input\n        size=\"sm\"\n        id=\"filter\"\n        type=\"text\"\n        value={filterValue}\n        onChange={handleInputChange}\n      />\n    </Stack>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { addContact } from 'redux/contacts/operations';\n\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Stack,\n  Text,\n} from '@chakra-ui/react';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm();\n\n  const onSubmit = data => {\n    dispatch(addContact(data));\n    reset();\n  };\n\n  return (\n    <Box>\n      <Stack as=\"form\" gap={3} mb={4} onSubmit={handleSubmit(onSubmit)}>\n        <FormControl pos=\"relative\">\n          <FormLabel>Name</FormLabel>\n          <Input\n            size=\"sm\"\n            w=\"300px\"\n            {...register('name', {\n              required: 'Name is required',\n              pattern: {\n                value:\n                  /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n                message:\n                  'Name may contains only letters, apostrophe, dash and spaces.',\n              },\n            })}\n            type=\"text\"\n          />\n          <Box position=\"absolute\">\n            {errors?.name && (\n              <Text\n                fontSize=\"xs\"\n                color=\"#ff001b\"\n                textShadow=\"rgb(0 0 0 / 25%) 0px 2px 2px\"\n              >\n                {errors?.name?.message || 'Error'}\n              </Text>\n            )}\n          </Box>\n        </FormControl>\n        <FormControl pos=\"relative\">\n          <FormLabel>Number</FormLabel>\n          <Input\n            size=\"sm\"\n            w=\"300px\"\n            {...register('number', {\n              required: 'Number is required',\n              pattern: {\n                value:\n                  /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n                message:\n                  'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n              },\n            })}\n            type=\"tel\"\n          />\n          <Box position=\"absolute\">\n            {errors?.number && (\n              <Text\n                fontSize=\"xs\"\n                color=\"#ff001b\"\n                textShadow=\"rgb(0 0 0 / 25%) 0px 2px 2px\"\n              >\n                {errors?.number?.message || 'Error'}\n              </Text>\n            )}\n          </Box>\n        </FormControl>\n        <Button size=\"sm\" w=\"300px\" type=\"submit\">\n          Add contact\n        </Button>\n      </Stack>\n    </Box>\n  );\n};\n\n// #1\n// pattern.value /regular expr/\n\n// #2 'name' & 'number' fields names is expected for backend\n// чи надійно їх передавати як просто data?\n\n// name\n// \"Name may contains only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n","import { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Box, Heading } from '@chakra-ui/react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\n\nimport { ContactList } from 'components/ContactList';\nimport { FilterContacts } from 'components/FilterContacts';\nimport { ContactForm } from 'components/ContactForm';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>My Contacts</title>\n      </Helmet>\n      <Heading as=\"h1\" mb={5}>\n        My Contacts\n      </Heading>\n      <ContactForm />\n      <Box>\n        <FilterContacts />\n        <div>{isLoading && 'Request in progress...'}</div>\n        <ContactList />\n      </Box>\n    </>\n  );\n}\n"],"names":["selectIsLoading","state","contacts","isLoading","selectFilterValue","filter","selectFilteredContacts","items","selectContacts","normalizedFilter","toLowerCase","contact","name","includes","modalRoot","document","querySelector","ModalEdit","props","isOpen","onClose","id","number","dispatch","useDispatch","useForm","defaultValues","register","handleSubmit","reset","errors","formState","createPortal","size","p","zIndex","as","gap","onSubmit","data","updateContact","pos","mb","required","pattern","value","message","type","pointerEvents","children","color","position","top","fontSize","textShadow","transform","ContactItem","useDisclosure","onOpen","justify","align","w","borderRadius","boxShadow","fontWeight","onClick","deleteContact","ContactList","visibleContacts","useSelector","direction","map","FilterContacts","filterValue","htmlFor","onChange","e","setFilterValue","target","ContactForm","addContact","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}